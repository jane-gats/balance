// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	controller "balance/internal/controller"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Db is an autogenerated mock type for the db type
type Db struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, o
func (_m *Db) CreateOrder(ctx context.Context, o controller.Order) error {
	ret := _m.Called(ctx, o)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, controller.Order) error); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, u
func (_m *Db) CreateUser(ctx context.Context, u controller.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, controller.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadUser provides a mock function with given fields: ctx, idUser
func (_m *Db) ReadUser(ctx context.Context, idUser uint) (controller.User, error) {
	ret := _m.Called(ctx, idUser)

	var r0 controller.User
	if rf, ok := ret.Get(0).(func(context.Context, uint) controller.User); ok {
		r0 = rf(ctx, idUser)
	} else {
		r0 = ret.Get(0).(controller.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, u
func (_m *Db) UpdateUser(ctx context.Context, u controller.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, controller.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDb interface {
	mock.TestingT
	Cleanup(func())
}

// NewDb creates a new instance of Db. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDb(t mockConstructorTestingTNewDb) *Db {
	mock := &Db{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
